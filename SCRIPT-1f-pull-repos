#!/bin/bash

# ----------------------------------------------------------------------
# This script is intended to be "sourced" by other scripts.
#
#   The script doing the "source" must have set the variable:
#     username_files
#   to an array of files from which to obtain usernames
#
# This script:
#   Pulls (or clones, if not yet cloned) the repositories
#   for the usernames specified in the username_files.
#
# Author:  David Mutchler.
# ----------------------------------------------------------------------

if [ "${username_files}" == "" ]; then
    echo ""
    echo "The script that SOURCED this script"
    echo "failed to set the array variable"
    echo "  username_files"
    echo "to a non-empty value."
    echo "EXITING NOW, NOTHING DONE."
    echo ""
    exit 1
fi

# ----------------------------------------------------------------------
# Check that repositories for ALL of the usernames in the specified
# file(s) exist.  Exit with a warning if not.
#
# At the same time, get the values of the variables:
#      repos_folder       e.g.    REPOS/REPOS-csse120-202030
#      repos_subfolders   e.g.  ( REPOS   REPOS-csse120-202030 )
#      repo_prefix        e.g.  csse120-202030-
#      gitter_ssh         e.g.
#          mutchler@gitter.csse.rose-hulman.edu
#      gitter_repos_folder  e.g.  /srv/repos
#      usernames          e.g. (mutchler alangavr)
#
# from the relevant files.
# ----------------------------------------------------------------------

if [ "${CHECK_REPOS_MADE_HAS_RUN}" != "1" ]; then
    source SCRIPT-1d-check-repos-made
fi

# ----------------------------------------------------------------------
# For each repo corresponding to a username in the usernames
#   for this run, pull it (or clone it if it does not yet exist).
# ----------------------------------------------------------------------

echo ""
echo "Pulling (or cloning) the repos."

cd "${repos_folder}"

clone_command="ssh://${gitter_ssh}:${gitter_repos_folder}"

for username in ${usernames[@]}; do
    repo_name="${repo_prefix}${username}"

    if [ -d ${repo_name} ]; then
        echo "    PULLING ${username} (that is, ${repo_name})"
        cd ${repo_name}
        git pull
        cd ..
    else
        echo "    CLONING ${username} (that is, ${repo_name})"
        git clone "${clone_command}/${repo_name}"
    fi
done

# ---------------------------------------------------------------------
# Undo the CD done previously in this script.
# ---------------------------------------------------------------------

for folder in ${repos_subfolders[@]}; do
    cd ..
done


PULL_REPOS_HAS_RUN=1  # For use in scripts "sourcing" this script.
